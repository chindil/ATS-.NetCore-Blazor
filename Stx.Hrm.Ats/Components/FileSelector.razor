
@*Input file control*@
<div class="dropzone @fileDropCssClass rounded @CssClass">
    <InputFile id="fileInput" title="" class="" placeholder="Status" 
               OnChange="@OnInputFileChange"               
               @ondragenter="HandleDragEnter"
               @ondragleave="HandleDragLeave" @onmouseleave="HandleDragLeave" />
    <span class="float-start flex-grow-1 text-sm text-muted ">Drop your image here or click here to choose an image</span>
    <button class="btn btn-outline-secondary btn-sm text-small m-1">Choose File</button>
</div>

@if (!string.IsNullOrWhiteSpace(PreviewImageDataUri)) @*Single Image Preview*@
{
    <div class="media text-center ml-2 my-2">
        <img src="@PreviewImageDataUri" alt="Preview" class="img-fluid" style="max-height:200px;">
        <button type="button" class="close pl-2 pt-1" aria-label="Close" @onclick="@(e => ClearFiles())">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}

@if (AllowMultiple && SelectedFiles != null && SelectedFiles.Count > 0) @*Show the file list for multiple files*@
{
    <div class="col-12">
        <ul>
            @foreach (var file in SelectedFiles)
            {
                <li>
                    @file.Name
                    <button class="btn btn-link text-danger p-0 pl-0" type="button" @onclick="@(e => RemoveFile(file))">
                        <span tabindex="0" title="Remove">🗙</span>
                    </button>
                </li>
            }
        </ul>
    </div>
}

@if (!string.IsNullOrWhiteSpace(ImageSrc)) @*Image Api*@
{
    <div class="media text-center ml-2 mt-2">
        <img src="@ImageSrc" alt="" class="img-fluid" style="max-height:200px;">
        <button  type="button" class="close pl-2 pt-1" aria-label="Close" @onclick="@(e => ClearFiles())">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}

@if ((fileTypeError || fileSizeError)) @*Image Errors*@
{
    <ul class="validation-errors mb-0">
        @if (fileTypeError)
        {
            <li class="validation-message">Only image files are accepted.</li>
        }
        @if (fileSizeError)
        {
            <li class="validation-message">The max file size is @MaxFileSizeMB MB.</li>
        }
    </ul>
}

@code {
    [Parameter] public bool AllowMultiple { get; set; } = false;
    [Parameter] public string CssClass { get; set; }
    [Parameter] public EventCallback<IBrowserFile> ImageSelectedEventCallback { get; set; }
    [Parameter] public EventCallback<bool> ImageClearEventCallback { get; set; }
    private short _pageUid;
    [Parameter]
    public short PageUID
    {
        get => _pageUid;
        set
        {
            _pageUid = value;
            MakeImageUrl();
        }
    }
    private string _ImageKey;
    [Parameter] public string ImageKey {
        get => _ImageKey;
        set
        {
            _ImageKey = value;
            MakeImageUrl();
        }
    }
    private string ImageSrc { get; set; }
    private string PreviewImageDataUri { get; set; }
    IList<string> ImageDataUriList = new List<string>();
    IList<IBrowserFile> SelectedFiles = new List<IBrowserFile>();
    //private List<IFileListEntry> selectedFiles = new List<IFileListEntry>();

    private string multipleAtr = "";
    const int MaxFileSizeMB = 5;
    const int MaxFileSize = MaxFileSizeMB * 1024 * 1024; // 5MB
    private string fileDropCssClass = "";
    private bool fileSizeError = false;
    private bool fileTypeError = false;

    private void HandleDragEnter()
    {
        fileDropCssClass = "dropzone-drag";
    }

    private void HandleDragLeave()
    {
        fileDropCssClass = "";
    }

    public void MakeImageUrl()
    {
        if (PageUID != 0 && !string.IsNullOrWhiteSpace(ImageKey))
            ImageSrc = $@"Init.Apixxx/api/cda/?puid={PageUID}&key={ImageKey}";
        else
            ImageSrc = "";
    }

    
    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        fileDropCssClass = "";
        fileSizeError = false;
        fileTypeError = false;
        var maxAllowedFiles = 3;
        List<string> acceptedFileTypes = new List<string>() { "image/png", "image/jpeg", "image/gif" };

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {

            bool error = false;
                if (file.Size > MaxFileSize)
                {
                    error = true;
                    fileSizeError = true;
                }

                if (!acceptedFileTypes.Contains(file.ContentType))
                {
                    error = true;
                    fileTypeError = true;
                }

                //keep the good files
                if (!error)
                {
                    if (!AllowMultiple) SelectedFiles.Clear();
                    SelectedFiles.Add(file);
                    await HandleImageSelection(file);
                    await ImageSelectedEventCallback.InvokeAsync(file);
                    StateHasChanged();
                }


        }
    }

    async Task HandleImageSelection(IBrowserFile file)
    {
        if (file != null)
        {
            // Load as an image file in memory
@*          var format = "image/jpeg";
            var imageFile = await rawFile.ToImageFileAsync(format, 640, 480);
            var ms = new MemoryStream();
            await imageFile.Data.CopyToAsync(ms);*@
            //PreviewImageDataUri = $"data:{format};base64,{Convert.ToBase64String(ms.ToArray())}";

            var format = "image/jpeg";
            var resizedImageFile = await file.RequestImageFileAsync(format, 100, 100);
            var buffer = new byte[resizedImageFile.Size];
            await resizedImageFile.OpenReadStream().ReadAsync(buffer);
            PreviewImageDataUri = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            ImageDataUriList.Add(PreviewImageDataUri);
        }
    }

    private void RemoveFile(IBrowserFile file)
    {
        if (file != null)
        {
            SelectedFiles.Remove(file);
            PreviewImageDataUri = "";
        }
    }

    private async Task ClearFiles()
    {
        PreviewImageDataUri = "";
        ImageSrc = "";
        SelectedFiles.Clear();
        await ImageClearEventCallback.InvokeAsync(true);
        //StateHasChanged();
    }



    @*
    private async Task HandleFileInputChange(IBrowserFile[] files)
    {
        fileDropCssClass = "";
        fileSizeError = false;
        fileTypeError = false;
        List<string> acceptedFileTypes = new List<string>() { "image/png", "image/jpeg", "image/gif" };
        if (files != null)
        {
            foreach (var file in files)
            {
                bool error = false;
                if (file.Size > MaxFileSize)
                {
                    error = true;
                    fileSizeError = true;
                }

                if (!acceptedFileTypes.Contains(file.ContentType))
                {
                    error = true;
                    fileTypeError = true;
                }

                //keep the good files
                if (!error)
                {
                    if (!AllowMultiple) SelectedFiles.Clear();
                    SelectedFiles.Add(file);
                    await HandleImageSelection(file);
                    await ImageSelectedEventCallback.InvokeAsync(file);
                    StateHasChanged();
                }
            }
        }
    }*@

@*    private async Task<string> SaveFile(IBrowserFile file, string guid = null)
    {
        if (guid == null)
        {
            guid = Guid.NewGuid().ToString();
        }
        var relativePath = Path.Combine("uploads", guid);
        var dirToSave = Path.Combine(_env.WebRootPath, relativePath);
        var di = new DirectoryInfo(dirToSave);
        if (!di.Exists)
        {
            di.Create();
        }
        var filePath = Path.Combine(dirToSave, file.Name);
        using (var stream = file.OpenReadStream(maxFileSize))
        {
            using (var mstream = new MemoryStream())
            {
                await stream.CopyToAsync(mstream);
                await File.WriteAllBytesAsync(filePath, mstream.ToArray());
            }
        }
        var url = Path.Combine(relativePath, file.Name).Replace("\\", "/");
        return url;
    }*@
}